from mpu6050 import mpu6050
from mpu6050-raspberrypi-1.1 import mpu6050
from mpu6050 import mpu6050
import mpu6050
sensor = mpu6050(0x68)
from mpu6050 import mpu6050
sensor = mpu6050
help(sensro
help(mpu6050)
from mpu6050 import mpu6050
sensor = mpu6050(0x68)
print(sensor.get_accel_data())
help(mpu6050)
help('modules')
import RPi.GPIO as GPIO
help(GPIO)
import RPi.GPIO as GPIO
help(GPIO)
help(type(GPIO))
help(GPIO)
help(type(self))
help(GPIO)
help(input)
help()
input
inputInt
quit
clear
import math
help(math)
q
from mpu6050 import mpu6050
help(mpu6050)
help(math)
help(mpu6050)
round(5.9384838, 3)
round(3984835.9384838, 3)
round(3984835.9384838, 2)
from mpu6050 import mpu6050
help(mpu6050)
import numpy as np
print(np.random.random()
print(np.random.random())
l = [1, 2, 3, 4, 5]
sum(l)
len(l)
sum(l) / len(l)
l = [1.5, 3,5, 6.9]
sum(l) / len(l)
from mpu6050 import mpu6050
sensor = mpu6050(0x68)
accel_list =[]
for i in range(32):
accel_list.append(sensor.get_accel_data()
for i in range(32):
accel_list.append(sensor.get_accel_data()
for i in range(32):
	accel_list.append(sensor.get_accel_data()
)
sum(accel_list) / len(accel_list)
print(accel_list)
import numpy as np
a = np.arrange((3,3,3))
a = np.arange((3,3,3))
a = np.arange(1, (3,3,3)
)
a = np.arange(1)
print(a)
help(np.arange())
help(np)
clear
help(numpy)
clear
a = np.arange(1, 27)
print(a)
a = np.arange(0, 27)
print(a)
a = a.np.reshape((3,3,3))
a = a.reshape((3,3,3))
print(a)
print(a[(3,) + (3,) + (3,)])
print(a[(1,) + (1,) + (1,)])
print(a[[1,] + [1,] + [1,]])
print(a[(1,) + (1,) + (1,)])
print(a[((1,) + (1,) + (1,))])
state = [1,1]
action = 1
print(a[state + action])
print(a[state + (action,) ])
print(a[ (state + (action,) ) ])
print(a[(state,) + (action,) ])
print(a)
print(a[(state,) + (action,) ])
print(a[(state,)])
print(a[ ((state,) + (action,)) ])
print(a[(state,) ])
x = (a[ ((state,) + (action,)) ])
print(x)
print(a[1,1,1])
print(a[[1,1,1]])
print(a[(1,1,1)])
clear
print(action)
print((action,))
print(state)
print(state + action)
print(state + (action,) )
print(state + [action,] )
print( (state + [action,]) )
print( a[(state + [action,])] )
print(state + (action,) )
print((state,) + (action,) )
clear
from mpu6050 import 6050
from mpu6050 import mpu6050
import numpy as np
a = np.arange(0, 27, size=(3,3,3))
a = np.arange(0, 27,)
a = a.reshape(3,3,3)
print( a[1,1,1] )
state = [1, 1]
action = 1
print( a[state] )
print( a[state + (action,) ] )
print( a[state + [action,] ] )
print( a[ (state,) + (action,) ] )
print( state + action )
print( (state,) + action )
print( (state,) + (action,) )
print( state + [action] )
print( (state + [action]) )
print( (1,1,1) )
print( (state + [action]) )
print( tuple(state + [action]) )
print( [state + [action]] )
print( a[ tuple( (state,) + (action,) ) ] )
print(a[(1,1,1)])
x = tuple( state + [action,] )
print(x)
a[x]
print( a[ tuple(state + [action,] ) ] )
x = np.argmax(a)
print(x)
print(a[state])
print(a[state,])
print(np.argmax( a[state,] ))
print(np.argmax( a[state] ))
print(np.argmax( a[tuple(state)] ))
print( a[tuple(state)] )
print(state)
print(a[1,1])
print(a)
print(np.argmax( a[tuple(state)] ))
print(np.argmax( a)
print(np.argmax( a))
print(a[26])
print(np.unravel_index(np.argmax( a)))
print(np.unravel_index(np.argmax( a), a.shape))
print(np.unravel_index(np.argmax( a), a.shape))[2]
print(np.unravel_index(np.argmax( a), a.shape)[2]  )
print(np.unravel_index(np.argmax( a[state]), a.shape))
from RPIO import PWM
help(RPIO)
help
help()
modules
